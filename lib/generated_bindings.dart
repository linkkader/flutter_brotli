// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class CBrotli {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CBrotli(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CBrotli.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<TVALUE> myCompress(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _myCompress(
      str,
      path,
    );
  }

  late final _myCompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TVALUE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('myCompress');
  late final _myCompress = _myCompressPtr.asFunction<
      ffi.Pointer<TVALUE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TVALUE> myDeCompress(
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _myDeCompress(
      data,
      length,
      path,
    );
  }

  late final _myDeCompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TVALUE> Function(ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedLongLong, ffi.Pointer<ffi.Char>)>>('myDeCompress');
  late final _myDeCompress = _myDeCompressPtr.asFunction<
      ffi.Pointer<TVALUE> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Char>)>();
}

class TVALUE extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Int()
  external int length;
}
